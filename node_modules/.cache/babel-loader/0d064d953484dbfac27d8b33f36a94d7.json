{"ast":null,"code":"'use strict';\n\nvar _toConsumableArray = require(\"C:\\\\Users\\\\fgb_0\\\\Downloads\\\\sitemap-builder\\\\node_modules\\\\@babel\\\\runtime/helpers/toConsumableArray\");\n\nvar AbstractLevelDOWN = require('abstract-leveldown').AbstractLevelDOWN;\n\nvar inherits = require('inherits');\n\nvar DeferredIterator = require('./deferred-iterator');\n\nvar deferrables = 'put get del batch clear'.split(' ');\nvar optionalDeferrables = 'approximateSize compactRange'.split(' ');\n\nfunction DeferredLevelDOWN(db) {\n  AbstractLevelDOWN.call(this, db.supports || {}); // TODO (future major): remove this fallback; db must have manifest that\n  // declares approximateSize and compactRange in additionalMethods.\n\n  var _iteratorNormalCompletion = true;\n  var _didIteratorError = false;\n  var _iteratorError = undefined;\n\n  try {\n    for (var _iterator = optionalDeferrables[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n      var m = _step.value;\n\n      if (typeof db[m] === 'function' && !this.supports.additionalMethods[m]) {\n        this.supports.additionalMethods[m] = true;\n      }\n    }\n  } catch (err) {\n    _didIteratorError = true;\n    _iteratorError = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion && _iterator.return != null) {\n        _iterator.return();\n      }\n    } finally {\n      if (_didIteratorError) {\n        throw _iteratorError;\n      }\n    }\n  }\n\n  this._db = db;\n  this._operations = [];\n  closed(this);\n}\n\ninherits(DeferredLevelDOWN, AbstractLevelDOWN);\nDeferredLevelDOWN.prototype.type = 'deferred-leveldown';\n\nDeferredLevelDOWN.prototype._open = function (options, callback) {\n  var _this = this;\n\n  this._db.open(options, function (err) {\n    if (err) return callback(err);\n    var _iteratorNormalCompletion2 = true;\n    var _didIteratorError2 = false;\n    var _iteratorError2 = undefined;\n\n    try {\n      for (var _iterator2 = _this._operations[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n        var op = _step2.value;\n\n        if (op.iterator) {\n          op.iterator.setDb(_this._db);\n        } else {\n          var _this$_db;\n\n          (_this$_db = _this._db)[op.method].apply(_this$_db, _toConsumableArray(op.args));\n        }\n      }\n    } catch (err) {\n      _didIteratorError2 = true;\n      _iteratorError2 = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n          _iterator2.return();\n        }\n      } finally {\n        if (_didIteratorError2) {\n          throw _iteratorError2;\n        }\n      }\n    }\n\n    _this._operations = [];\n    open(_this);\n    callback();\n  });\n};\n\nDeferredLevelDOWN.prototype._close = function (callback) {\n  var _this2 = this;\n\n  this._db.close(function (err) {\n    if (err) return callback(err);\n    closed(_this2);\n    callback();\n  });\n};\n\nfunction open(self) {\n  var _iteratorNormalCompletion3 = true;\n  var _didIteratorError3 = false;\n  var _iteratorError3 = undefined;\n\n  try {\n    var _loop = function _loop() {\n      var m = _step3.value;\n\n      self['_' + m] = function () {\n        var _this$_db2;\n\n        return (_this$_db2 = this._db)[m].apply(_this$_db2, arguments);\n      };\n    };\n\n    for (var _iterator3 = deferrables.concat('iterator')[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n      _loop();\n    }\n  } catch (err) {\n    _didIteratorError3 = true;\n    _iteratorError3 = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion3 && _iterator3.return != null) {\n        _iterator3.return();\n      }\n    } finally {\n      if (_didIteratorError3) {\n        throw _iteratorError3;\n      }\n    }\n  }\n\n  var _arr = Object.keys(self.supports.additionalMethods);\n\n  var _loop2 = function _loop2() {\n    var m = _arr[_i];\n\n    self[m] = function () {\n      var _this$_db3;\n\n      return (_this$_db3 = this._db)[m].apply(_this$_db3, arguments);\n    };\n  };\n\n  for (var _i = 0; _i < _arr.length; _i++) {\n    _loop2();\n  }\n}\n\nfunction closed(self) {\n  var _iteratorNormalCompletion4 = true;\n  var _didIteratorError4 = false;\n  var _iteratorError4 = undefined;\n\n  try {\n    var _loop3 = function _loop3() {\n      var m = _step4.value;\n\n      self['_' + m] = function () {\n        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n          args[_key] = arguments[_key];\n        }\n\n        this._operations.push({\n          method: m,\n          args: args\n        });\n      };\n    };\n\n    for (var _iterator4 = deferrables[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {\n      _loop3();\n    }\n  } catch (err) {\n    _didIteratorError4 = true;\n    _iteratorError4 = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion4 && _iterator4.return != null) {\n        _iterator4.return();\n      }\n    } finally {\n      if (_didIteratorError4) {\n        throw _iteratorError4;\n      }\n    }\n  }\n\n  var _arr2 = Object.keys(self.supports.additionalMethods);\n\n  var _loop4 = function _loop4() {\n    var m = _arr2[_i2];\n\n    self[m] = function () {\n      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        args[_key2] = arguments[_key2];\n      }\n\n      this._operations.push({\n        method: m,\n        args: args\n      });\n    };\n  };\n\n  for (var _i2 = 0; _i2 < _arr2.length; _i2++) {\n    _loop4();\n  }\n\n  self._iterator = function (options) {\n    var it = new DeferredIterator(self, options);\n\n    this._operations.push({\n      iterator: it\n    });\n\n    return it;\n  };\n}\n\nDeferredLevelDOWN.prototype._serializeKey = function (key) {\n  return key;\n};\n\nDeferredLevelDOWN.prototype._serializeValue = function (value) {\n  return value;\n};\n\nmodule.exports = DeferredLevelDOWN;\nmodule.exports.DeferredIterator = DeferredIterator;","map":null,"metadata":{},"sourceType":"script"}